#+TITLE: my blog
#+OPTIONS: toc:nil

* recent posts


#+begin_src emacs-lisp :exports results :results output raw :eval yes
(let* ((directory "./blog/posts/")  ;; Directory to scan
       (files (directory-files directory t "\\.org$")))
  
  ;; Process each org file
  (dolist (file files)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      ;; Look for #+TITLE: tag
      (let ((title (if (re-search-forward "^#\\+TITLE:\\s-*\\(.*\\)$" nil t)
                       (match-string 1)
                     ;; If no TITLE found, use filename without extension
                     (file-name-base file))))
        ;; Create relative path for the link
        (let* ((rel-path (file-relative-name file directory))
               (html-path (concat (file-name-sans-extension rel-path) ".html")))
          ;; Print directly to standard output
          (princ (format "- [[file:%s][%s]]\n" html-path title)))))))
#+END_SRC






#+begin_src emacs-lisp :exports results :results html :eval yes

  ;; (defun lik/get-keyword-key-value (kwd)
  ;;   (let ((data (cadr kwd)))
  ;; 	(list (plist-get data :key)
  ;; 		  (plist-get data :value))))

  ;; (defun lik/org-current-buffer-get-title ()
  ;;   (nth 1
  ;; 	   (assoc "TITLE"
  ;; 			  (org-element-map (org-element-parse-buffer 'greater-element)
  ;; 				  '(keyword)
  ;; 				#'lik/get-keyword-key-value))))
  ;; (defun lik/org-file-get-title (file)
  ;;   (with-current-buffer (find-file-noselect file)
  ;; 	(lik/org-current-buffer-get-title)))
  ;; (lik/org-file-get-title "blog/posts/post1.org")


#+end_src




#+BEGIN_SRC emacs-lisp :exports results :results html :eval yes

  ;; (let* ((post-dir "blog/posts/")
  ;;        (posts (directory-files post-dir t "\\.org$"))
  ;;        (sorted-posts (sort posts (lambda (a b)
  ;;                                  (string< (file-name-nondirectory a)
  ;;                                           (file-name-nondirectory b)))))
  ;;        (reversed-posts (reverse sorted-posts)))
  ;;   (mapconcat
  ;;    (lambda (post)
  ;;      (with-current-buffer (find-file-noselect post)
  ;;        (goto-char (point-min))
  ;;        (let ((title (or (plist-get (org-export-get-environment) :title)
  ;;                         (org-entry-get (point-min) "TITLE")
  ;;                         (file-name-base post)))
  ;;              (date (org-entry-get (point-min) "DATE")))
  ;;          (concat
  ;;           (format "** [[file:blog/%s][%s]]\n" 
  ;;                   (file-name-nondirectory post) title)
  ;;           (when date (format "<small>%s</small>\n\n" date))
  ;;           "#+BEGIN_EXPORT html\n<div class=\"post-excerpt\">\n"
  ;;           (buffer-substring-no-properties 
  ;;            (point-min) 
  ;;            (min (+ (point-min) 300) (buffer-size)))
  ;;           "... [[file:blog/%s][Read More]]</div>\n#+END_EXPORT\n"
  ;;           (file-name-nondirectory post)))))
  ;;    reversed-posts
  ;;    "\n"))


#+END_SRC
